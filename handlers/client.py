from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup
from dispatcher import bot, dp
from keyboard.client_kb import inline_menu, visa_btn, visa_cities, charter_btn, charter_cities, yes_no_btn, number_of_persons_btn, number_of_childrens_btn
from keyboard.client_kb import tour_btn, tour_cities, tour_resort, tour_night, hotel_stars_btn, hotel_btn, exchange_btn, currency_btn, exchange_cities, exchange_delivery, approve_btn
from keyboard.admin_kb import gen_inline_main_menu
from handlers.admin import ID
from aiogram_calendar import simple_cal_callback, SimpleCalendar
from database import sqlite_db
import math


# @dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –Ø charter- –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –ø–æ–º–æ—â–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö. –ß—Ç–æ–± –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞–∂–º–∏ /menu')


# @dp.message_handler(commands=['menu'], state="*")
async def menu(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:  
        await state.finish()
    
    if message.from_user.id == ID:
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', reply_markup=gen_inline_main_menu())
    else:
        await message.answer('–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?', reply_markup=inline_menu)


# @dp.callback_query_handler(text=['menu'])
async def menu_2(callback: types.CallbackQuery):
    await callback.message.delete()
    
    await callback.message.answer('–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?', reply_markup=inline_menu)

# @dp.message_handler(commands=['consultant'], state="*")
async def consultant(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:  
        await state.finish()
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
    await sqlite_db.add_consultant(message.from_user.id)
    

# @dp.callback_query_handler(text=['consultant'])
async def consultant_2(callback: types.CallbackQuery):
    await callback.message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
    await sqlite_db.add_consultant(callback.from_user.id)
    

# ____________EVISA_____________________________

# @dp.callback_query_handler(commands=['evisa'])
async def evisa_menu(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–°—Ä–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ï–≤–∏–∑—ã 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\n–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è - 40$\n\n–ü—Ä–∏—Å—Ç—É–ø–∏–º?',
                                reply_markup=visa_btn)


class FSMVisa(StatesGroup):
    date = State()
    location = State()
    passport = State()
    photo = State()


# @dp.callback_query_handler(text=['visa_yes'], state=None)
async def visa_start(callback: types.CallbackQuery):
    await callback.message.delete()
    await FSMVisa.date.set()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã:', reply_markup=await SimpleCalendar().start_calendar())


# @dp.callback_query_handler(state=FSMVisa.date, simple_cal_callback.filter())
async def visa_load_date(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback, callback_data)
    if selected:
        async with state.proxy() as data:
            data['user_id'] = callback.message.chat.id
            data['date'] = date.strftime("%d/%m/%Y")
        await callback.message.delete()
        await FSMVisa.next()
        await callback.message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã', reply_markup=visa_cities)


# @dp.callback_query_handler(state=FSMVisa.location)
async def visa_load_location(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
            data['location'] = callback.data
    await callback.message.delete() 
    await FSMVisa.next()
    await callback.message.answer('–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç–∞')


# @dp.callback_query_handler(content_types=['photo'], state=FSMVisa.passport)
async def visa_load_passport(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
            data['passport'] = message.photo[0].file_id
    await FSMVisa.next()
    await message.delete()
    await message.answer('–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ')


# @dp.callback_query_handler(content_types=['photo'], state=FSMVisa.photo)
async def visa_load_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
            data['photo'] = message.photo[0].file_id
    await message.delete()
    await sqlite_db.add_visa(state)
    await state.finish()
    await message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—è–Ω—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')

# __________________–ß–∞—Ä—Ç–µ—Ä–Ω—ã–µ –±–∏–ª–µ—Ç—ã_________________________

class FSMCharter(StatesGroup):
     departure = State()
     arrival = State()
     date_departure = State()
     one_two_way = State()
     date_back = State()
     number_of_persons = State()
     children = State()
     number_of_childrens = State()


# @dp.callback_query_handler(text=['charter'])
async def charter(callback: types.CallbackQuery):
     await callback.message.delete()
     await callback.message.answer('‚ö†Ô∏è –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã –Ω–∞ —á–∞—Ä—Ç–µ—Ä–Ω—ã–µ —Ä–µ–π—Å—ã –æ–±–º–µ–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç.\n\n'
                                   'üß≥ –í–∫–ª—é—á–µ–Ω –±–∞–≥–∞–∂ - 20 –∫–≥, —Ä—É—á–Ω–∞—è –∫–ª–∞–¥—å - 8 –∫–≥\n\n–ü—Ä–∏—Å—Ç—É–ø–∏–º?', reply_markup=charter_btn)


# @dp.callback_query_handler(text=['charter_yes'], state=None)
async def charter_start(callback: types.CallbackQuery):
     await FSMCharter.departure.set()
     await callback.message.delete()
     await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞', reply_markup=charter_cities)


# @dp.callback_query_handler(state=FSMCharter.departure)
async def departure_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['user_id'] = callback.from_user.id
         data['departure'] = callback.data
    await FSMCharter.next()
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞:', reply_markup=charter_cities)


# @dp.callback_query_handler(state=FSMCharter.arrival)
async def arrival_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['arrival'] = callback.data
    await FSMCharter.next()
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', reply_markup=await SimpleCalendar().start_calendar())


# @dp.callback_query_handler(simple_cal_callback.filter(), state=FSMCharter.date_departure)
async def date_departure_load(callback: types.CallbackQuery, callback_data: dict, state=FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback, callback_data)
    if selected:
        async with state.proxy() as data:
            data['date_departure'] = date.strftime("%d/%m/%Y")
    
        await FSMCharter.next()
        await callback.message.delete()
        await callback.message.answer('–ù—É–∂–Ω—ã –ª–∏ –±–∏–ª–µ—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ?', reply_markup=yes_no_btn)


# @dp.callback_query_handler(state=FSMCharter.one_two_way)
async def one_two_way_load(callback: types.CallbackQuery, state=FSMContext):
    
    if callback.data == 'yes':
         async with state.proxy() as data:
            data['one_two_way'] = '–≤ –æ–±–µ'
         await FSMCharter.next()
         await callback.message.delete()
         await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', reply_markup=await SimpleCalendar().start_calendar())

    else:
         async with state.proxy() as data:
            data['one_two_way'] = '–≤ –æ–¥–Ω—É'
         await FSMCharter.next()
         async with state.proxy() as data:
            data['date_back'] = callback.data
         await FSMCharter.next()
         await callback.message.delete()
         await callback.message.answer('–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫?', reply_markup=number_of_persons_btn)


# @dp.callback_query_handler(simple_cal_callback.filter(), state=FSMCharter.date_back)
async def date_back_load(callback: types.CallbackQuery, callback_data: dict, state=FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback, callback_data)
    if selected:
        async with state.proxy() as data:
            data['date_back'] = date.strftime("%d/%m/%Y")
    
        await FSMCharter.next()
        await callback.message.delete()
        await callback.message.answer('–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫?', reply_markup=number_of_persons_btn)


# @dp.callback_query_handler(state=FSMCharter.number_of_persons)
async def number_of_persons_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['number_of_persons'] = callback.data

    await FSMCharter.next()
    await callback.message.delete()
    await callback.message.answer('–ü—É—Ç–µ—à–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Å –í–∞–º–∏ –º–ª–∞–¥–µ–Ω—Ü—ã –¥–æ 2 –ª–µ—Ç', reply_markup=yes_no_btn)


# @dp.callback_query_handler(state=FSMCharter.children)
async def children_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['children'] = callback.data

    if callback.data == 'no':
         await FSMCharter.next()
         async with state.proxy() as data:
            data['number_of_children'] = 0
         await callback.message.delete()
         await sqlite_db.add_charter(state)
         await state.finish()
         await callback.message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—è–Ω—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')

    else:
         await FSMCharter.next()
         await callback.message.delete()
         await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–ª–∞–¥–µ–Ω—Ü–µ–≤', reply_markup=number_of_childrens_btn)


# @dp.callback_query_handler(state=FSMCharter.number_of_childrens)
async def number_of_childrens_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['number_of_childrens'] = callback.data
    async with state.proxy() as data:
         await callback.message.delete()
         await sqlite_db.add_charter(state)
         await state.finish()
         await callback.message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—è–Ω—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')


# __________________–ü–∞–∫–µ—Ç–Ω—ã–µ –¢—É—Ä—ã_________________________

class FSMTour(StatesGroup):
     departure = State()
     resort = State()
     date_departure = State()
     amount_of_nights = State()
     number_of_persons = State()
     children = State()
     number_of_childrens = State()
     age_children = State()
     hotel = State()
     hotel_name = State()
     stars = State()


# @dp.callback_query_handler(text=['tour'])
async def tour(callback: types.CallbackQuery):
     await callback.message.delete()
     await callback.message.answer('–ö–∞–∂–¥—ã–π —Ç—É—Ä –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:\n\n‚úàÔ∏è –ê–≤–∏–∞–ø–µ—Ä–µ–ª–µ—Ç —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ\nüè® –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ\nüòã'
                                   '–ü–∏—Ç–∞–Ω–∏–µ (–æ–ø—Ü–∏—è)\nüöå –¢—Ä–∞–Ω—Å—Ñ–µ—Ä\nüè• –ú–µ–¥.—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞\n\n–ü—Ä–∏—Å—Ç—É–ø–∏–º?', reply_markup=tour_btn)


# @dp.callback_query_handler(text=['tour_yes'], state=None)
async def tour_start(callback: types.CallbackQuery):
     await FSMTour.departure.set()
     await callback.message.delete()
     await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞', reply_markup=tour_cities)


# @dp.callback_query_handler(state=FSMTour.departure)
async def tour_departure_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['user_id'] = callback.from_user.id
         data['departure'] = callback.data
    await FSMTour.next()
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä–æ—Ä—Ç:', reply_markup=tour_resort)


# @dp.callback_query_handler(state=FSMTour.resort)
async def resort_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['resort'] = callback.data
    await FSMTour.next()
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞:', reply_markup=await SimpleCalendar().start_calendar())


# @dp.callback_query_handler(simple_cal_callback.filter(), state=FSMTour.date_departure)
async def tour_date_departure_load(callback: types.CallbackQuery, callback_data: dict, state=FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback, callback_data)
    if selected:
        async with state.proxy() as data:
            data['date_departure'] = date.strftime("%d/%m/%Y")
    
        await FSMTour.next()
        await callback.message.delete()
        await callback.message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π?', reply_markup=tour_night)


# @dp.callback_query_handler(state=FSMTour.amount_of_nights)
async def tour_amount_of_nights_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['amount_of_nights'] = callback.data
    await FSMTour.next()
    await callback.message.delete()
    await callback.message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:', reply_markup=number_of_persons_btn)


# @dp.callback_query_handler(state=FSMTour.number_of_persons)
async def tour_number_of_persons_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['number_of_persons'] = callback.data
    await FSMTour.next()
    await callback.message.delete()
    await callback.message.answer('n–ü—É—Ç–µ—à–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Å –í–∞–º–∏ –¥–µ—Ç–∏', reply_markup=yes_no_btn)


# @dp.callback_query_handler(state=FSMTour.children)
async def tour_children_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['children'] = callback.data
    if callback.data == 'no':
         await FSMTour.next()
         async with state.proxy() as data:
            data['number_of_childrens'] = callback.data
         await FSMTour.next()
         async with state.proxy() as data:
            data['age_children'] = callback.data
         await FSMTour.next()
         await callback.message.delete()
         await callback.message.answer('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ—Ç–µ–ª—å –Ω–∞ –ø—Ä–∏–º–µ—Ç–µ?', reply_markup=yes_no_btn)
    else:
        await FSMTour.next()
        await callback.message.delete()
        await callback.message.answer('–¢—É—Ä –ø–∞–∫–µ—Ç\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:', reply_markup=number_of_childrens_btn)


# @dp.callback_query_handler(state=FSMTour.number_of_childrens)
async def tour_number_of_childrens_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['number_of_childrens'] = callback.data
    await FSMTour.next()
    await callback.message.delete()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')


# @dp.message_handler(state=FSMTour.age_children)
async def tour_age_children(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
         data['age_children'] = message.text
    await FSMTour.next()
    await message.delete()
    await message.answer('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ—Ç–µ–ª—å –Ω–∞ –ø—Ä–∏–º–µ—Ç–µ?', reply_markup=yes_no_btn)


# @dp.callback_query_handler(state=FSMTour.hotel)
async def tour_hotel_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['hotel'] = callback.data
    if callback.data == 'no':
        await FSMTour.next()
        async with state.proxy() as data:
            data['hotel_name'] = callback.data
        await FSMTour.next()
        await callback.message.delete()
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∑–≤–µ–¥ –≤ –æ—Ç–µ–ª–µ', reply_markup=hotel_stars_btn)

    else:
        await FSMTour.next()
        await callback.message.delete()
        await callback.message.answer('–¢—É—Ä –ø–∞–∫–µ—Ç\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è')


# @dp.message_handler(state=FSMTour.hotel_name)
async def tour_hotel_name_load(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['hotel'] = message.text
        data['hotel_name'] = message.text
        
    await FSMTour.next()
    async with state.proxy() as data:
        data['stars'] = 'no'
    
    await message.delete()
    await sqlite_db.add_tour(state)
    await message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—è–Ω—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
    await state.finish()

# @dp.register_callback_query_handler(state=FSMTour.stars)
async def tour_stars_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
        data['stars'] = callback.data
   
    await callback.message.delete()
    await sqlite_db.add_tour(state)
    await callback.message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—è–Ω—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
    await state.finish()


# __________________–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª–µ–π_________________________

class FSMHotel(StatesGroup):
    resort = State()
    hotel = State()
    hotel_name = State()
    stars = State()
    arrival_day = State()
    amount_of_nights = State()
    amount_of_person = State()
    children = State()
    number_of_childrens = State()
    age_of_children = State()


# @dp.callback_query_handler(text=['hotel'])
async def hotel(callback: types.CallbackQuery):
     await callback.message.delete()
     await callback.message.answer('–ú—ã –±—Ä–æ–Ω–∏—Ä—É–µ–º –æ—Ç–µ–ª–∏ –≤–æ –í—å–µ—Ç–Ω–∞–º–µ –ø–æ –ª—É—á—à–∏–º —Ç–∞—Ä–∏—Ñ–∞–º.\n\n–ü—Ä–∏—Å—Ç—É–ø–∏–º?', reply_markup=hotel_btn)


# @dp.callback_query_handler(text=['hotel_yes'], state=None)
async def hotel_start(callback: types.CallbackQuery):
     await FSMHotel.resort.set()
     await callback.message.delete()
     await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä–æ—Ä—Ç:', reply_markup=tour_resort)


# @dp.callback_query_handler(state=FSMHotel.resort)
async def hotel_resort_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
        data['user_id'] = callback.from_user.id
        data['resort'] = callback.data
    await FSMHotel.next()
    await callback.message.delete()
    await callback.message.answer('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ—Ç–µ–ª—å –Ω–∞ –ø—Ä–∏–º–µ—Ç–µ?', reply_markup=yes_no_btn)


# @dp.callback_query_handler(state=FSMHotel.hotel)
async def hotel_load(callback: types.CallbackQuery, state=FSMContext):
    
    
    if callback.data == 'no':
        async with state.proxy() as data:
            data['hotel'] = '–Ω–µ –≤–∞–∂–Ω–æ'
        await FSMHotel.next()
        async with state.proxy() as data:
            data['hotel_name'] = callback.data
        await FSMHotel.next()
        await callback.message.delete()
        await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥ –≤ –æ—Ç–µ–ª–µ', reply_markup=hotel_stars_btn)
    
    else:
        async with state.proxy() as data:
            data['hotel'] = callback.data
        await FSMHotel.next()
        await callback.message.delete()
        await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è')


# @dp.message_handler(state=FSMHotel.hotel_name)
async def hotel_name_load(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['hotel_name'] = message.text
        data['hotel'] = message.text
    await FSMHotel.next()
    async with state.proxy() as data:
        data['stars'] = 'no'
    await FSMHotel.next()
    await message.delete()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è:', reply_markup=await SimpleCalendar().start_calendar())


# @dp.callback_query_handler(state=FSMHotel.stars)
async def stars_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
        data['stars'] = callback.data
    await FSMHotel.next()
    await callback.message.delete()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è:', reply_markup=await SimpleCalendar().start_calendar())


# @dp.callback_query_handler(simple_cal_callback.filter(), state=FSMHotel.arrival_day)
async def arrival_day_load(callback: types.CallbackQuery, callback_data: dict, state=FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback, callback_data)
    if selected:
        async with state.proxy() as data:
            data['arrival_day'] = date.strftime("%d/%m/%Y")
        await FSMHotel.next()
        await callback.message.delete()
        await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π:')


# @dp.callback_query_handler(state=FSMHotel.amount_of_nights)
async def amount_of_nights_load(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data['amount_of_nights'] = int(message.text)
    await FSMHotel.next()
    await message.delete()
    await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:', reply_markup=number_of_persons_btn)


# @dp.message_handler(state=FSMHotel.amount_of_person)
async def hotel_number_of_persons_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['number_of_persons'] = callback.data
    await FSMHotel.next()
    await callback.message.delete()
    await callback.message.answer('–ü—É—Ç–µ—à–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Å –í–∞–º–∏ –¥–µ—Ç–∏', reply_markup=yes_no_btn)


# @dp.callback_query_handler(state=FSMHotel.children)
async def hotel_children_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['children'] = callback.data
    if callback.data == 'no':
         await FSMHotel.next()
         async with state.proxy() as data:
            data['number_of_childrens'] = callback.data
         await FSMHotel.next()
         async with state.proxy() as data:
            data['age_children'] = callback.data
         await callback.message.delete()
         await sqlite_db.add_hotel(state)
         await state.finish()
         await callback.message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—è–Ω—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
         
         
    else:
        await FSMHotel.next()
        await callback.message.delete()
        await callback.message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:', reply_markup=number_of_childrens_btn)


# @dp.callback_query_handler(state=FSMHotel.number_of_childrens)
async def hotel_number_of_childrens_load(callback: types.CallbackQuery, state=FSMContext):
    async with state.proxy() as data:
         data['number_of_childrens'] = callback.data
    await FSMHotel.next()
    await callback.message.delete()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –¥–µ—Ç–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')


@dp.message_handler(state=FSMHotel.age_of_children)
async def hotel_age_children(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
         data['age_children'] = message.text
    await message.delete()
    await sqlite_db.add_hotel(state)
    await state()
    await message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—è–Ω—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')


# __________________–û–±–º–µ–Ω –¥–µ–Ω–µ–≥ _________________________


class FSMExchange(StatesGroup):
    currency = State()
    city = State()
    amount = State()
    aprove = State()
    delivery = State()


# @dp.callback_query_handler(text=['exchange'])
async def exchange(callback: types.CallbackQuery):
     await callback.message.delete()
     await callback.message.answer('–ü–æ–º–æ–∂–µ–º –æ–±–º–µ–Ω—è—Ç—å –≤–∞—à—É –≤–∞–ª—é—Ç—É –Ω–∞ –í—å–µ—Ç–Ω–∞–º—Å–∫–∏–µ –¥–æ–Ω–≥–∏.\n–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç—É–ø–Ω–æ '
                                   '–≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö –í—å–µ—Ç–Ω–∞–º–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–º–∞—Ç—ã. \n–î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –≥.–ù—è—á–∞–Ω–≥.'
                                   '\n\n–ü—Ä–∏—Å—Ç—É–ø–∏–º?', reply_markup=exchange_btn)


# @dp.callback_query_handler(text=['exchange_yes'], state=None)
async def exchange_start(callback: types.CallbackQuery):
     await FSMExchange.currency.set()
     await callback.message.delete()
     await callback.message.answer('–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?', reply_markup=currency_btn)


# @dp.callback_query_handler(state=FSMExchange.currency)
async def currency_load(callback: types.CallbackQuery, state=FSMContext):
     async with state.proxy() as data:
         data['user_id'] = callback.from_user.id
         data['currency'] = callback.data
     await FSMExchange.next()
     await callback.message.delete()
     await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', reply_markup=exchange_cities)


# @dp.callback_query_handler(state=FSMExchange.city)
async def city_load(callback: types.CallbackQuery, state=FSMContext):
     async with state.proxy() as data:
         data['city'] = callback.data
     await FSMExchange.next()
     await callback.message.delete()
     
     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
     
        


# @dp.message_handler(state=FSMExchange.amount)
async def amount_load(message: types.Message, state=FSMContext):
    try:
        amount = message.text
        async with state.proxy() as data:
            data['amount'] = amount
            rate = sqlite_db.check_currency(data['currency'])
            
            sum = rate * int(amount)
        await FSMExchange.next()
        await message.delete()
        await message.answer(f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ {math.floor(sum)} VND', reply_markup=approve_btn)
    except ValueError:
        await FSMExchange.amount.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏:')
        


# @dp.callback_query_handler(state=FSMExchange.approve)
async def approve_exchange(callback: types.CallbackQuery, state=FSMContext):
    if callback.data == 'aprove':
        async with state.proxy() as data:
            data['aprove'] = 'yes'
        await FSMExchange.next()
        await callback.message.delete()
        if data['city'] == '–Ω—è—á–∞–Ω–≥':
            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=exchange_delivery)
        else:
            await callback.message.answer('–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤—ã–¥–∞—á–∞ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–º–∞—Ç', reply_markup=approve_btn)

    else:
        await state.finish()
        await menu_2(callback)


# @dp.callback_query_handler(state=FSMExchange.delivery)
async def delivery_load(callback: types.CallbackQuery, state=FSMContext):
    if callback.data == 'aprove':
        async with state.proxy() as data:
            data['delivery'] = '–±–∞–Ω–∫–æ–º–∞—Ç'
        await sqlite_db.add_exchange(state)  
        await callback.message.delete()
        await callback.message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—è–Ω—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
        await state.finish()
    
    elif callback.data == 'decline':
        await state.finish()
        await menu_2(callback)

    else:
        async with state.proxy() as data:
            data['delivery'] = callback.data
        
        await sqlite_db.add_exchange(state)  
        await callback.message.delete()
        await callback.message.answer('–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏—è–Ω—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
        await state.finish()


# __________________–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ _________________________


def register_client_handler(dp: Dispatcher):
    dp.register_message_handler(start_message, commands=['start'])
    dp.register_message_handler(menu, commands=['menu'], state="*")
    dp.register_callback_query_handler(menu_2, text=['main_menu'])

    dp.register_message_handler(consultant, commands=['consultant'], state="*")
    dp.register_callback_query_handler(consultant_2, text=['consultant'])

    dp.register_callback_query_handler(evisa_menu, text=['evisa'])
    dp.register_callback_query_handler(visa_start, text=['visa_yes'], state=None)
    dp.register_callback_query_handler(visa_load_date, simple_cal_callback.filter(), state=FSMVisa.date)
    dp.register_callback_query_handler(visa_load_location, state=FSMVisa.location)
    dp.register_message_handler(visa_load_passport, content_types=['photo'], state=FSMVisa.passport)
    dp.register_message_handler(visa_load_photo, content_types=['photo'], state=FSMVisa.photo)


    dp.register_callback_query_handler(charter, text=['charter'])
    dp.register_callback_query_handler(charter_start, text=['charter_yes'], state=None)
    dp.register_callback_query_handler(departure_load, state=FSMCharter.departure)
    dp.register_callback_query_handler(arrival_load, state=FSMCharter.arrival)
    dp.register_callback_query_handler(date_departure_load, simple_cal_callback.filter(), state=FSMCharter.date_departure)
    dp.register_callback_query_handler(one_two_way_load, state=FSMCharter.one_two_way)
    dp.register_callback_query_handler(date_back_load, simple_cal_callback.filter(), state=FSMCharter.date_back)
    dp.register_callback_query_handler(number_of_persons_load, state=FSMCharter.number_of_persons)
    dp.register_callback_query_handler(children_load, state=FSMCharter.children)
    dp.register_callback_query_handler(number_of_childrens_load, state=FSMCharter.number_of_childrens)


    dp.register_callback_query_handler(tour, text=['tour'])
    dp.register_callback_query_handler(tour_start, text=['tour_yes'], state=None)
    dp.register_callback_query_handler(tour_departure_load, state=FSMTour.departure)
    dp.register_callback_query_handler(resort_load, state=FSMTour.resort)
    dp.register_callback_query_handler(tour_date_departure_load, simple_cal_callback.filter(), state=FSMTour.date_departure)
    dp.register_callback_query_handler(tour_amount_of_nights_load, state=FSMTour.amount_of_nights)
    dp.register_callback_query_handler(tour_number_of_persons_load, state=FSMTour.number_of_persons)
    dp.register_callback_query_handler(tour_children_load, state=FSMTour.children)
    dp.register_callback_query_handler(tour_number_of_childrens_load, state=FSMTour.number_of_childrens)
    dp.register_message_handler(tour_age_children, state=FSMTour.age_children)
    dp.register_callback_query_handler(tour_hotel_load, state=FSMTour.hotel)
    dp.register_message_handler(tour_hotel_name_load, state=FSMTour.hotel_name)
    dp.register_callback_query_handler(tour_stars_load, state=FSMTour.stars)
 

    dp.register_callback_query_handler(hotel, text=['hotel'])
    dp.register_callback_query_handler(hotel_start, text=['hotel_yes'], state=None)
    dp.register_callback_query_handler(hotel_resort_load, state=FSMHotel.resort)
    dp.register_callback_query_handler(hotel_load, state=FSMHotel.hotel)
    dp.register_message_handler(hotel_name_load, state=FSMHotel.hotel_name)
    dp.register_callback_query_handler(stars_load, state=FSMHotel.stars)
    dp.register_callback_query_handler(arrival_day_load, simple_cal_callback.filter(), state=FSMHotel.arrival_day)
    dp.register_message_handler(amount_of_nights_load, state=FSMHotel.amount_of_nights)
    dp.register_callback_query_handler(hotel_number_of_persons_load, state=FSMHotel.amount_of_person)
    dp.register_callback_query_handler(hotel_children_load, state=FSMHotel.children)
    dp.register_callback_query_handler(hotel_number_of_childrens_load, state=FSMHotel.number_of_childrens)
    dp.register_message_handler(hotel_age_children, state=FSMHotel.age_of_children)


    dp.register_callback_query_handler(exchange, text=['exchange'])
    dp.register_callback_query_handler(exchange_start, text=['exchange_yes'], state=None)
    dp.register_callback_query_handler(currency_load, state=FSMExchange.currency)
    dp.register_callback_query_handler(city_load, state=FSMExchange.city)
    dp.register_message_handler(amount_load, state=FSMExchange.amount)
    dp.register_callback_query_handler(approve_exchange, state=FSMExchange.aprove)
    dp.register_callback_query_handler(delivery_load, state=FSMExchange.delivery)
    